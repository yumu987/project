%-----------------------------------------------------------------------
% Feature Similarity Index
% https://web.comp.polyu.edu.hk/cslzhang/IQA/FSIM/FSIM.htm
% https://www4.comp.polyu.edu.hk/~cslzhang/IQA/TIP_IQA_FSIM.pdf
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% Dataset from Nick Yue
% Special thanks to nick :)
% Pre-processing images produced by Yumu Xie
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% EENG30009 Individual Research Project 3
% TOPIC: Single-image Super-resolution
%
% Yumu Xie
% University of Bristol
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% Global variables
%-----------------------------------------------------------------------
% Clear all variables in the workspace
clear;

% Clear all commands in command space
clc;

% Indication of script executing
disp('FeatureSIM is executing');

% Nearest-neighbor
global nearest_neighbor_fsim_array;
global nearest_neighbor_fsimc_array;
nearest_neighbor_fsim_array = [];
nearest_neighbor_fsimc_array = [];

% Bilinear
global bilinear_fsim_array;
global bilinear_fsimc_array;
bilinear_fsim_array = [];
bilinear_fsimc_array = [];

% Bicubic
global bicubic_fsim_array;
global bicubic_fsimc_array;
bicubic_fsim_array = [];
bicubic_fsimc_array = [];

% Lanczos
global lanczos_fsim_array;
global lanczos_fsimc_array;
lanczos_fsim_array = [];
lanczos_fsimc_array = [];

% Pixel area relation
global pixel_area_relation_fsim_array;
global pixel_area_relation_fsimc_array;
pixel_area_relation_fsim_array = [];
pixel_area_relation_fsimc_array = [];
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% FSIM and FSIMc
%-----------------------------------------------------------------------
% Nearest-neighbor
for i = 1:25
    % Reference images
    input_image_files = {
    'input/001.jpg'...
    'input/002.jpg'...
    'input/003.jpg'...
    'input/004.jpg'...
    'input/005.jpg'...
    'input/006.jpg'...
    'input/007.jpg'...
    'input/008.jpg'...
    'input/009.jpg'...
    'input/010.jpg'...
    'input/011.jpg'...
    'input/012.jpg'...
    'input/013.jpg'...
    'input/014.jpg'...
    'input/015.jpg'...
    'input/016.jpg'...
    'input/017.jpg'...
    'input/018.jpg'...
    'input/019.jpg'...
    'input/020.jpg'...
    'input/021.jpg'...
    'input/022.jpg'...
    'input/023.jpg'...
    'input/024.jpg'...
    'input/025.jpg'
    };
    % Distorted images
    nearest_neighbor_gans_image_files = {   
    'nearest_neighbor_gans/001_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/002_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/003_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/004_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/005_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/006_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/007_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/008_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/009_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/010_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/011_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/012_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/013_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/014_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/015_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/016_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/017_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/018_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/019_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/020_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/021_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/022_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/023_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/024_nearest_neighbor_gans.jpg'...
    'nearest_neighbor_gans/025_nearest_neighbor_gans.jpg'
    };
    % Read reference image
    ref_img = imread(input_image_files{i});
    % Read distorted image
    dis_img = imread(nearest_neighbor_gans_image_files{i});
    % Get the dimensions of images
    ref_img_size = size(ref_img);
    dis_img_size = size(dis_img);
    % Compare the dimensions
    if isequal(ref_img_size, dis_img_size)
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        nearest_neighbor_fsim_array(i) = FSIM;
        nearest_neighbor_fsimc_array(i) = FSIMc;
    else
        % Specify reference height and width
        [ref_height, ref_width, ref_numChannels] = size(ref_img);
        % Perform bilinear interpolation for final upsampling (resizing)
        dis_img_bilinear = imresize(dis_img, [ref_height, ref_width], 'bilinear');
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img_bilinear);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        nearest_neighbor_fsim_array(i) = FSIM;
        nearest_neighbor_fsimc_array(i) = FSIMc;
    end
end

% Bilinear
for i = 1:25
    % Reference images
    input_image_files = {
    'input/001.jpg'...
    'input/002.jpg'...
    'input/003.jpg'...
    'input/004.jpg'...
    'input/005.jpg'...
    'input/006.jpg'...
    'input/007.jpg'...
    'input/008.jpg'...
    'input/009.jpg'...
    'input/010.jpg'...
    'input/011.jpg'...
    'input/012.jpg'...
    'input/013.jpg'...
    'input/014.jpg'...
    'input/015.jpg'...
    'input/016.jpg'...
    'input/017.jpg'...
    'input/018.jpg'...
    'input/019.jpg'...
    'input/020.jpg'...
    'input/021.jpg'...
    'input/022.jpg'...
    'input/023.jpg'...
    'input/024.jpg'...
    'input/025.jpg'
    };
    % Distorted images
    bilinear_gans_image_files = {
    'bilinear_gans/001_bilinear_gans.jpg'...
    'bilinear_gans/002_bilinear_gans.jpg'...
    'bilinear_gans/003_bilinear_gans.jpg'...
    'bilinear_gans/004_bilinear_gans.jpg'...
    'bilinear_gans/005_bilinear_gans.jpg'...
    'bilinear_gans/006_bilinear_gans.jpg'...
    'bilinear_gans/007_bilinear_gans.jpg'...
    'bilinear_gans/008_bilinear_gans.jpg'...
    'bilinear_gans/009_bilinear_gans.jpg'...
    'bilinear_gans/010_bilinear_gans.jpg'...
    'bilinear_gans/011_bilinear_gans.jpg'...
    'bilinear_gans/012_bilinear_gans.jpg'...
    'bilinear_gans/013_bilinear_gans.jpg'...
    'bilinear_gans/014_bilinear_gans.jpg'...
    'bilinear_gans/015_bilinear_gans.jpg'...
    'bilinear_gans/016_bilinear_gans.jpg'...
    'bilinear_gans/017_bilinear_gans.jpg'...
    'bilinear_gans/018_bilinear_gans.jpg'...
    'bilinear_gans/019_bilinear_gans.jpg'...
    'bilinear_gans/020_bilinear_gans.jpg'...
    'bilinear_gans/021_bilinear_gans.jpg'...
    'bilinear_gans/022_bilinear_gans.jpg'...
    'bilinear_gans/023_bilinear_gans.jpg'...
    'bilinear_gans/024_bilinear_gans.jpg'...
    'bilinear_gans/025_bilinear_gans.jpg'
    };
    % Read reference image
    ref_img = imread(input_image_files{i});
    % Read distorted image
    dis_img = imread(bilinear_gans_image_files{i});
    % Get the dimensions of images
    ref_img_size = size(ref_img);
    dis_img_size = size(dis_img);
    % Compare the dimensions
    if isequal(ref_img_size, dis_img_size)
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        bilinear_fsim_array(i) = FSIM;
        bilinear_fsimc_array(i) = FSIMc;
    else
        % Specify reference height and width
        [ref_height, ref_width, ref_numChannels] = size(ref_img);
        % Perform bilinear interpolation for final upsampling (resizing)
        dis_img_bilinear = imresize(dis_img, [ref_height, ref_width], 'bilinear');
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img_bilinear);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        bilinear_fsim_array(i) = FSIM;
        bilinear_fsimc_array(i) = FSIMc;
    end
end

% Bicubic
for i = 1:25
    % Reference images
    input_image_files = {
    'input/001.jpg'...
    'input/002.jpg'...
    'input/003.jpg'...
    'input/004.jpg'...
    'input/005.jpg'...
    'input/006.jpg'...
    'input/007.jpg'...
    'input/008.jpg'...
    'input/009.jpg'...
    'input/010.jpg'...
    'input/011.jpg'...
    'input/012.jpg'...
    'input/013.jpg'...
    'input/014.jpg'...
    'input/015.jpg'...
    'input/016.jpg'...
    'input/017.jpg'...
    'input/018.jpg'...
    'input/019.jpg'...
    'input/020.jpg'...
    'input/021.jpg'...
    'input/022.jpg'...
    'input/023.jpg'...
    'input/024.jpg'...
    'input/025.jpg'
    };
    % Distorted images
    bicubic_gans_image_files = {   
   'bicubic_gans/001_bicubic_gans.jpg'...
   'bicubic_gans/002_bicubic_gans.jpg'...
   'bicubic_gans/003_bicubic_gans.jpg'...
   'bicubic_gans/004_bicubic_gans.jpg'...
   'bicubic_gans/005_bicubic_gans.jpg'...
   'bicubic_gans/006_bicubic_gans.jpg'...
   'bicubic_gans/007_bicubic_gans.jpg'...
   'bicubic_gans/008_bicubic_gans.jpg'...
   'bicubic_gans/009_bicubic_gans.jpg'...
   'bicubic_gans/010_bicubic_gans.jpg'...
   'bicubic_gans/011_bicubic_gans.jpg'...
   'bicubic_gans/012_bicubic_gans.jpg'...
   'bicubic_gans/013_bicubic_gans.jpg'...
   'bicubic_gans/014_bicubic_gans.jpg'...
   'bicubic_gans/015_bicubic_gans.jpg'...
   'bicubic_gans/016_bicubic_gans.jpg'...
   'bicubic_gans/017_bicubic_gans.jpg'...
   'bicubic_gans/018_bicubic_gans.jpg'...
   'bicubic_gans/019_bicubic_gans.jpg'...
   'bicubic_gans/020_bicubic_gans.jpg'...
   'bicubic_gans/021_bicubic_gans.jpg'...
   'bicubic_gans/022_bicubic_gans.jpg'...
   'bicubic_gans/023_bicubic_gans.jpg'...
   'bicubic_gans/024_bicubic_gans.jpg'...
   'bicubic_gans/025_bicubic_gans.jpg'
   };
    % Read reference image
    ref_img = imread(input_image_files{i});
    % Read distorted image
    dis_img = imread(bicubic_gans_image_files{i});
    % Get the dimensions of images
    ref_img_size = size(ref_img);
    dis_img_size = size(dis_img);
    % Compare the dimensions
    if isequal(ref_img_size, dis_img_size)
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        bicubic_fsim_array(i) = FSIM;
        bicubic_fsimc_array(i) = FSIMc;
    else
        % Specify reference height and width
        [ref_height, ref_width, ref_numChannels] = size(ref_img);
        % Perform bilinear interpolation for final upsampling (resizing)
        dis_img_bilinear = imresize(dis_img, [ref_height, ref_width], 'bilinear');
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img_bilinear);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        bicubic_fsim_array(i) = FSIM;
        bicubic_fsimc_array(i) = FSIMc;
    end
end

% Lanczos
for i = 1:25
    % Reference images
    input_image_files = {
    'input/001.jpg'...
    'input/002.jpg'...
    'input/003.jpg'...
    'input/004.jpg'...
    'input/005.jpg'...
    'input/006.jpg'...
    'input/007.jpg'...
    'input/008.jpg'...
    'input/009.jpg'...
    'input/010.jpg'...
    'input/011.jpg'...
    'input/012.jpg'...
    'input/013.jpg'...
    'input/014.jpg'...
    'input/015.jpg'...
    'input/016.jpg'...
    'input/017.jpg'...
    'input/018.jpg'...
    'input/019.jpg'...
    'input/020.jpg'...
    'input/021.jpg'...
    'input/022.jpg'...
    'input/023.jpg'...
    'input/024.jpg'...
    'input/025.jpg'
    };
    % Distorted images
    lanczos_gans_image_files = {   
   'lanczos_gans/001_lanczos_gans.jpg'...
   'lanczos_gans/002_lanczos_gans.jpg'...
   'lanczos_gans/003_lanczos_gans.jpg'...
   'lanczos_gans/004_lanczos_gans.jpg'...
   'lanczos_gans/005_lanczos_gans.jpg'...
   'lanczos_gans/006_lanczos_gans.jpg'...
   'lanczos_gans/007_lanczos_gans.jpg'...
   'lanczos_gans/008_lanczos_gans.jpg'...
   'lanczos_gans/009_lanczos_gans.jpg'...
   'lanczos_gans/010_lanczos_gans.jpg'...
   'lanczos_gans/011_lanczos_gans.jpg'...
   'lanczos_gans/012_lanczos_gans.jpg'...
   'lanczos_gans/013_lanczos_gans.jpg'...
   'lanczos_gans/014_lanczos_gans.jpg'...
   'lanczos_gans/015_lanczos_gans.jpg'...
   'lanczos_gans/016_lanczos_gans.jpg'...
   'lanczos_gans/017_lanczos_gans.jpg'...
   'lanczos_gans/018_lanczos_gans.jpg'...
   'lanczos_gans/019_lanczos_gans.jpg'...
   'lanczos_gans/020_lanczos_gans.jpg'...
   'lanczos_gans/021_lanczos_gans.jpg'...
   'lanczos_gans/022_lanczos_gans.jpg'...
   'lanczos_gans/023_lanczos_gans.jpg'...
   'lanczos_gans/024_lanczos_gans.jpg'...
   'lanczos_gans/025_lanczos_gans.jpg'
   };
    % Read reference image
    ref_img = imread(input_image_files{i});
    % Read distorted image
    dis_img = imread(lanczos_gans_image_files{i});
    % Get the dimensions of images
    ref_img_size = size(ref_img);
    dis_img_size = size(dis_img);
    % Compare the dimensions
    if isequal(ref_img_size, dis_img_size)
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        lanczos_fsim_array(i) = FSIM;
        lanczos_fsimc_array(i) = FSIMc;
    else
        % Specify reference height and width
        [ref_height, ref_width, ref_numChannels] = size(ref_img);
        % Perform bilinear interpolation for final upsampling (resizing)
        dis_img_bilinear = imresize(dis_img, [ref_height, ref_width], 'bilinear');
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img_bilinear);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        lanczos_fsim_array(i) = FSIM;
        lanczos_fsimc_array(i) = FSIMc;
    end
end

% Pixel area relation
for i = 1:25
    % Reference images
    input_image_files = {
    'input/001.jpg'...
    'input/002.jpg'...
    'input/003.jpg'...
    'input/004.jpg'...
    'input/005.jpg'...
    'input/006.jpg'...
    'input/007.jpg'...
    'input/008.jpg'...
    'input/009.jpg'...
    'input/010.jpg'...
    'input/011.jpg'...
    'input/012.jpg'...
    'input/013.jpg'...
    'input/014.jpg'...
    'input/015.jpg'...
    'input/016.jpg'...
    'input/017.jpg'...
    'input/018.jpg'...
    'input/019.jpg'...
    'input/020.jpg'...
    'input/021.jpg'...
    'input/022.jpg'...
    'input/023.jpg'...
    'input/024.jpg'...
    'input/025.jpg'
    };
    % Distorted images
    pixel_area_relation_gans_image_files = {   
   'pixel_area_relation_gans/001_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/002_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/003_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/004_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/005_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/006_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/007_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/008_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/009_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/010_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/011_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/012_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/013_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/014_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/015_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/016_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/017_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/018_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/019_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/020_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/021_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/022_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/023_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/024_pixel_area_relation_gans.jpg'...
   'pixel_area_relation_gans/025_pixel_area_relation_gans.jpg'
   };
    % Read reference image
    ref_img = imread(input_image_files{i});
    % Read distorted image
    dis_img = imread(pixel_area_relation_gans_image_files{i});
    % Get the dimensions of images
    ref_img_size = size(ref_img);
    dis_img_size = size(dis_img);
    % Compare the dimensions
    if isequal(ref_img_size, dis_img_size)
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        pixel_area_relation_fsim_array(i) = FSIM;
        pixel_area_relation_fsimc_array(i) = FSIMc;
    else
        % Specify reference height and width
        [ref_height, ref_width, ref_numChannels] = size(ref_img);
        % Perform bilinear interpolation for final upsampling (resizing)
        dis_img_bilinear = imresize(dis_img, [ref_height, ref_width], 'bilinear');
        % Perform calculation of FSIM and FSIMc
        [FSIM, FSIMc] = FeatureSIM(ref_img, dis_img_bilinear);
        % Save FSIM and FSIMc into FSIM and FSIMc arrays
        pixel_area_relation_fsim_array(i) = FSIM;
        pixel_area_relation_fsimc_array(i) = FSIMc;
    end
end
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% Calculate the mean FSIM and FSIMc in 25 images
%-----------------------------------------------------------------------
% Nearest-neighbor
global mean_nearest_neighbor_fsim;
global mean_nearest_neighbor_fsimc;
mean_nearest_neighbor_fsim = mean(nearest_neighbor_fsim_array);
mean_nearest_neighbor_fsimc = mean(nearest_neighbor_fsimc_array);
% Bilinear
global mean_bilinear_fsim;
global mean_bilinear_fsimc;
mean_bilinear_fsim = mean(bilinear_fsim_array);
mean_bilinear_fsimc = mean(bilinear_fsimc_array);
% Bicubic
global mean_bicubic_fsim;
global mean_bicubic_fsimc;
mean_bicubic_fsim = mean(bicubic_fsim_array);
mean_bicubic_fsimc = mean(bicubic_fsimc_array);
% Lanczos
global mean_lanczos_fsim;
global mean_lanczos_fsimc;
mean_lanczos_fsim = mean(lanczos_fsim_array);
mean_lanczos_fsimc = mean(lanczos_fsimc_array);
% Pixel area relation
global mean_pixel_area_relation_fsim;
global mean_pixel_area_relation_fsimc;
mean_pixel_area_relation_fsim = mean(pixel_area_relation_fsim_array);
mean_pixel_area_relation_fsimc = mean(pixel_area_relation_fsimc_array);
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% Plot FSIM and FSIMc scatter chart
%-----------------------------------------------------------------------
disp('Plotting scatter chart');
% Nearest-neighbor
x1 = nearest_neighbor_fsim_array;
y1 = nearest_neighbor_fsimc_array;
scatter(x1, y1, 50, 'blue', 'filled');
title('FSIM & FSIMc of Nearest-neighbor');
xlabel('FSIM');
ylabel('FSIMc');
grid on;
saveas(gcf, 'FSIM_FSIMc_Nearest_neighbor.png');
% Bilinear
x2 = bilinear_fsim_array;
y2 = bilinear_fsimc_array;
scatter(x2, y2, 50, 'red', 'filled');
title('FSIM & FSIMc of Bilinear');
xlabel('FSIM');
ylabel('FSIMc');
grid on;
saveas(gcf, 'FSIM_FSIMc_Bilinear.png');
% Bicubic
x3 = bicubic_fsim_array;
y3 = bicubic_fsimc_array;
scatter(x3, y3, 50, 'magenta', 'filled');
title('FSIM & FSIMc of Bicubic');
xlabel('FSIM');
ylabel('FSIMc');
grid on;
saveas(gcf, 'FSIM_FSIMc_Bicubic.png');
% Lanczos
x4 = lanczos_fsim_array;
y4 = lanczos_fsimc_array;
scatter(x4, y4, 50, 'green', 'filled');
title('FSIM & FSIMc of Lanczos');
xlabel('FSIM');
ylabel('FSIMc');
grid on;
saveas(gcf, 'FSIM_FSIMc_Lanczos.png');
% Pixel area relation
x5 = pixel_area_relation_fsim_array;
y5 = pixel_area_relation_fsimc_array;
scatter(x5, y5, 50, 'black', 'filled');
title('FSIM & FSIMc of Pixel area relation');
xlabel('FSIM');
ylabel('FSIMc');
grid on;
saveas(gcf, 'FSIM_FSIMc_Pixel_area_relation.png');
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% Plot FSIM and FSIMc bar chart
%-----------------------------------------------------------------------
disp('Plotting bar chart');
% Data
downsampling_categories = {'Nearest-neighbor', 'Bilinear', 'Bicubic', 'Lanczos', 'Pixel area relation'};
FSIM_values = [mean_nearest_neighbor_fsim, mean_bilinear_fsim, mean_bicubic_fsim, mean_lanczos_fsim, mean_pixel_area_relation_fsim];
FSIMc_values = [mean_nearest_neighbor_fsimc, mean_bilinear_fsimc, mean_bicubic_fsimc, mean_lanczos_fsimc, mean_pixel_area_relation_fsimc];
% FSIM bar chart
bar(FSIM_values);
% Add title and axis labels
title('Average FSIM in 25 images');
xlabel('Downsampling (Distortion)');
ylabel('Feature Similarity Index');
% Turn grid on
grid on;
xticks(1:length(downsampling_categories));
xticklabels(downsampling_categories);
% Save diagram
saveas(gcf, 'FSIM_bar_chart.png');
% FSIMc bar chart
bar(FSIMc_values);
% Add labels and title
title('Average FSIMc in 25 images');
xlabel('Downsampling (Distortion)');
ylabel('Feature Similarity Index Extension');
% Turn grid on
grid on;
xticks(1:length(downsampling_categories));
xticklabels(downsampling_categories);
% Save diagram
saveas(gcf, 'FSIMc_bar_chart.png');
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% Plot comparison bar chart of FSIM and FSIMc
%-----------------------------------------------------------------------
% Define positions for bars
x = 1:numel(FSIM_values); % Positions for the first set of bars
x_shifted = x + 0.3; % Shifted positions for the second set of bars
% Create figure
figure;
% Plot first FSIM bar chart
bar(x, FSIM_values, 0.3, 'blue');
% Hold the plot to add the second set of bars
hold on;
% Plot second FSIMc bar chart
bar(x_shifted, FSIMc_values, 0.3, 'red');
% Add labels, title, and legend
xlabel('Downsampling (Distortion)');
ylabel('FSIM & FSIMc');
title('Average FSIM & FSIMc in 25 images');
legend('FSIM', 'FSIMc');
xticks(1:length(downsampling_categories));
xticklabels(downsampling_categories);
% Turn grid on
grid on;
% Turn hold off to reset plot behaviour
hold off;
% Save diagram
saveas(gcf, 'FSIM_FSIMc_comparison_bar_chart.png');
%-----------------------------------------------------------------------

%-----------------------------------------------------------------------
% Indication of script completed
%-----------------------------------------------------------------------
disp('FeatureSIM is completed');
%-----------------------------------------------------------------------
